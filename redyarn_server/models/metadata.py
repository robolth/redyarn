# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from redyarn_server.models.base_model_ import Model
from redyarn_server import util


class Metadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id_file=None, date_created=None, filename=None, mimetype=None, filetype=None, size=None, extension=None, text=None, ascii_art=None, image_recognition=None, exif_data=None, csv_info=None, epub_info=None, pdf_info=None, office_info=None, id3_info=None, mp4_info=None):  # noqa: E501
        """Metadata - a model defined in OpenAPI

        :param id_file: The id_file of this Metadata.  # noqa: E501
        :type id_file: str
        :param date_created: The date_created of this Metadata.  # noqa: E501
        :type date_created: str
        :param filename: The filename of this Metadata.  # noqa: E501
        :type filename: str
        :param mimetype: The mimetype of this Metadata.  # noqa: E501
        :type mimetype: str
        :param filetype: The filetype of this Metadata.  # noqa: E501
        :type filetype: str
        :param size: The size of this Metadata.  # noqa: E501
        :type size: int
        :param extension: The extension of this Metadata.  # noqa: E501
        :type extension: str
        :param text: The text of this Metadata.  # noqa: E501
        :type text: str
        :param ascii_art: The ascii_art of this Metadata.  # noqa: E501
        :type ascii_art: str
        :param image_recognition: The image_recognition of this Metadata.  # noqa: E501
        :type image_recognition: Dict[str, object]
        :param exif_data: The exif_data of this Metadata.  # noqa: E501
        :type exif_data: Dict[str, object]
        :param csv_info: The csv_info of this Metadata.  # noqa: E501
        :type csv_info: Dict[str, object]
        :param epub_info: The epub_info of this Metadata.  # noqa: E501
        :type epub_info: Dict[str, object]
        :param pdf_info: The pdf_info of this Metadata.  # noqa: E501
        :type pdf_info: Dict[str, object]
        :param office_info: The office_info of this Metadata.  # noqa: E501
        :type office_info: Dict[str, object]
        :param id3_info: The id3_info of this Metadata.  # noqa: E501
        :type id3_info: Dict[str, object]
        :param mp4_info: The mp4_info of this Metadata.  # noqa: E501
        :type mp4_info: Dict[str, object]
        """
        self.openapi_types = {
            'id_file': str,
            'date_created': str,
            'filename': str,
            'mimetype': str,
            'filetype': str,
            'size': int,
            'extension': str,
            'text': str,
            'ascii_art': str,
            'image_recognition': Dict[str, object],
            'exif_data': Dict[str, object],
            'csv_info': Dict[str, object],
            'epub_info': Dict[str, object],
            'pdf_info': Dict[str, object],
            'office_info': Dict[str, object],
            'id3_info': Dict[str, object],
            'mp4_info': Dict[str, object]
        }

        self.attribute_map = {
            'id_file': 'idFile',
            'date_created': 'dateCreated',
            'filename': 'filename',
            'mimetype': 'mimetype',
            'filetype': 'filetype',
            'size': 'size',
            'extension': 'extension',
            'text': 'text',
            'ascii_art': 'ascii_art',
            'image_recognition': 'image_recognition',
            'exif_data': 'exif_data',
            'csv_info': 'csv_info',
            'epub_info': 'epub_info',
            'pdf_info': 'pdf_info',
            'office_info': 'office_info',
            'id3_info': 'id3_info',
            'mp4_info': 'mp4_info'
        }

        self._id_file = id_file
        self._date_created = date_created
        self._filename = filename
        self._mimetype = mimetype
        self._filetype = filetype
        self._size = size
        self._extension = extension
        self._text = text
        self._ascii_art = ascii_art
        self._image_recognition = image_recognition
        self._exif_data = exif_data
        self._csv_info = csv_info
        self._epub_info = epub_info
        self._pdf_info = pdf_info
        self._office_info = office_info
        self._id3_info = id3_info
        self._mp4_info = mp4_info

    @classmethod
    def from_dict(cls, dikt) -> 'Metadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Metadata of this Metadata.  # noqa: E501
        :rtype: Metadata
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id_file(self):
        """Gets the id_file of this Metadata.


        :return: The id_file of this Metadata.
        :rtype: str
        """
        return self._id_file

    @id_file.setter
    def id_file(self, id_file):
        """Sets the id_file of this Metadata.


        :param id_file: The id_file of this Metadata.
        :type id_file: str
        """
        if id_file is None:
            raise ValueError("Invalid value for `id_file`, must not be `None`")  # noqa: E501

        self._id_file = id_file

    @property
    def date_created(self):
        """Gets the date_created of this Metadata.


        :return: The date_created of this Metadata.
        :rtype: str
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Metadata.


        :param date_created: The date_created of this Metadata.
        :type date_created: str
        """

        self._date_created = date_created

    @property
    def filename(self):
        """Gets the filename of this Metadata.


        :return: The filename of this Metadata.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this Metadata.


        :param filename: The filename of this Metadata.
        :type filename: str
        """

        self._filename = filename

    @property
    def mimetype(self):
        """Gets the mimetype of this Metadata.


        :return: The mimetype of this Metadata.
        :rtype: str
        """
        return self._mimetype

    @mimetype.setter
    def mimetype(self, mimetype):
        """Sets the mimetype of this Metadata.


        :param mimetype: The mimetype of this Metadata.
        :type mimetype: str
        """

        self._mimetype = mimetype

    @property
    def filetype(self):
        """Gets the filetype of this Metadata.


        :return: The filetype of this Metadata.
        :rtype: str
        """
        return self._filetype

    @filetype.setter
    def filetype(self, filetype):
        """Sets the filetype of this Metadata.


        :param filetype: The filetype of this Metadata.
        :type filetype: str
        """

        self._filetype = filetype

    @property
    def size(self):
        """Gets the size of this Metadata.


        :return: The size of this Metadata.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Metadata.


        :param size: The size of this Metadata.
        :type size: int
        """

        self._size = size

    @property
    def extension(self):
        """Gets the extension of this Metadata.


        :return: The extension of this Metadata.
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this Metadata.


        :param extension: The extension of this Metadata.
        :type extension: str
        """

        self._extension = extension

    @property
    def text(self):
        """Gets the text of this Metadata.


        :return: The text of this Metadata.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Metadata.


        :param text: The text of this Metadata.
        :type text: str
        """

        self._text = text

    @property
    def ascii_art(self):
        """Gets the ascii_art of this Metadata.


        :return: The ascii_art of this Metadata.
        :rtype: str
        """
        return self._ascii_art

    @ascii_art.setter
    def ascii_art(self, ascii_art):
        """Sets the ascii_art of this Metadata.


        :param ascii_art: The ascii_art of this Metadata.
        :type ascii_art: str
        """

        self._ascii_art = ascii_art

    @property
    def image_recognition(self):
        """Gets the image_recognition of this Metadata.


        :return: The image_recognition of this Metadata.
        :rtype: Dict[str, object]
        """
        return self._image_recognition

    @image_recognition.setter
    def image_recognition(self, image_recognition):
        """Sets the image_recognition of this Metadata.


        :param image_recognition: The image_recognition of this Metadata.
        :type image_recognition: Dict[str, object]
        """

        self._image_recognition = image_recognition

    @property
    def exif_data(self):
        """Gets the exif_data of this Metadata.


        :return: The exif_data of this Metadata.
        :rtype: Dict[str, object]
        """
        return self._exif_data

    @exif_data.setter
    def exif_data(self, exif_data):
        """Sets the exif_data of this Metadata.


        :param exif_data: The exif_data of this Metadata.
        :type exif_data: Dict[str, object]
        """

        self._exif_data = exif_data

    @property
    def csv_info(self):
        """Gets the csv_info of this Metadata.


        :return: The csv_info of this Metadata.
        :rtype: Dict[str, object]
        """
        return self._csv_info

    @csv_info.setter
    def csv_info(self, csv_info):
        """Sets the csv_info of this Metadata.


        :param csv_info: The csv_info of this Metadata.
        :type csv_info: Dict[str, object]
        """

        self._csv_info = csv_info

    @property
    def epub_info(self):
        """Gets the epub_info of this Metadata.


        :return: The epub_info of this Metadata.
        :rtype: Dict[str, object]
        """
        return self._epub_info

    @epub_info.setter
    def epub_info(self, epub_info):
        """Sets the epub_info of this Metadata.


        :param epub_info: The epub_info of this Metadata.
        :type epub_info: Dict[str, object]
        """

        self._epub_info = epub_info

    @property
    def pdf_info(self):
        """Gets the pdf_info of this Metadata.


        :return: The pdf_info of this Metadata.
        :rtype: Dict[str, object]
        """
        return self._pdf_info

    @pdf_info.setter
    def pdf_info(self, pdf_info):
        """Sets the pdf_info of this Metadata.


        :param pdf_info: The pdf_info of this Metadata.
        :type pdf_info: Dict[str, object]
        """

        self._pdf_info = pdf_info

    @property
    def office_info(self):
        """Gets the office_info of this Metadata.


        :return: The office_info of this Metadata.
        :rtype: Dict[str, object]
        """
        return self._office_info

    @office_info.setter
    def office_info(self, office_info):
        """Sets the office_info of this Metadata.


        :param office_info: The office_info of this Metadata.
        :type office_info: Dict[str, object]
        """

        self._office_info = office_info

    @property
    def id3_info(self):
        """Gets the id3_info of this Metadata.


        :return: The id3_info of this Metadata.
        :rtype: Dict[str, object]
        """
        return self._id3_info

    @id3_info.setter
    def id3_info(self, id3_info):
        """Sets the id3_info of this Metadata.


        :param id3_info: The id3_info of this Metadata.
        :type id3_info: Dict[str, object]
        """

        self._id3_info = id3_info

    @property
    def mp4_info(self):
        """Gets the mp4_info of this Metadata.


        :return: The mp4_info of this Metadata.
        :rtype: Dict[str, object]
        """
        return self._mp4_info

    @mp4_info.setter
    def mp4_info(self, mp4_info):
        """Sets the mp4_info of this Metadata.


        :param mp4_info: The mp4_info of this Metadata.
        :type mp4_info: Dict[str, object]
        """

        self._mp4_info = mp4_info
